#!/usr/bin/env python3
"""
Script de Configura√ß√£o do Google Auth
====================================

Este script ajuda a configurar a autentica√ß√£o com Google APIs
para o monitoramento autom√°tico de pastas do Google Drive.
"""

import asyncio
import logging
import requests
import json
from pathlib import Path

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_api_connection():
    """Testa se a API est√° rodando"""
    try:
        response = requests.get("http://localhost:8000/health", timeout=10)
        if response.status_code == 200:
            logger.info("‚úÖ API est√° rodando")
            return True
        else:
            logger.error("‚ùå API n√£o est√° respondendo corretamente")
            return False
    except Exception as e:
        logger.error(f"‚ùå N√£o foi poss√≠vel conectar √† API: {e}")
        return False

def get_google_auth_url():
    """Obt√©m URL de autentica√ß√£o do Google"""
    try:
        response = requests.get("http://localhost:8000/google/auth-url", timeout=10)
        if response.status_code == 200:
            data = response.json()
            auth_url = data['auth_url']
            logger.info("üîó URL de autentica√ß√£o gerada com sucesso")
            logger.info(f"üìã Acesse esta URL para autorizar: {auth_url}")
            return auth_url
        else:
            logger.error(f"‚ùå Erro ao gerar URL: {response.text}")
            return None
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter URL de autentica√ß√£o: {e}")
        return None

def test_google_connection():
    """Testa conex√£o com Google APIs"""
    try:
        response = requests.get("http://localhost:8000/google/test-connection", timeout=10)
        if response.status_code == 200:
            data = response.json()
            logger.info("üîç Teste de conex√£o com Google APIs:")
            logger.info(f"   Drive: {data['drive_connection']}")
            logger.info(f"   Gmail: {data['gmail_connection']}")
            
            if data.get('drive_user_email'):
                logger.info(f"   Email Drive: {data['drive_user_email']}")
            if data.get('gmail_user_email'):
                logger.info(f"   Email Gmail: {data['gmail_user_email']}")
            
            return data['drive_connection'] == "‚úÖ OK" and data['gmail_connection'] == "‚úÖ OK"
        else:
            logger.error(f"‚ùå Erro no teste: {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar conex√£o: {e}")
        return False

def send_test_email(email):
    """Envia email de teste"""
    try:
        payload = {"email": email}
        response = requests.post("http://localhost:8000/google/send-test-email", json=payload, timeout=30)
        if response.status_code == 200:
            data = response.json()
            logger.info(f"‚úÖ {data['message']}")
            return True
        else:
            logger.error(f"‚ùå Erro ao enviar email: {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå Erro ao enviar email de teste: {e}")
        return False

def start_monitoring():
    """Inicia o monitoramento autom√°tico"""
    try:
        response = requests.post("http://localhost:8000/monitor/start", timeout=10)
        if response.status_code == 200:
            data = response.json()
            logger.info(f"üöÄ {data['message']}")
            logger.info(f"üìÅ Pasta monitorada: {data['details']['folder_id']}")
            logger.info(f"‚è∞ Intervalo de verifica√ß√£o: {data['details']['check_interval']} segundos")
            logger.info(f"üìß Email de destino: {data['details']['destination_email']}")
            return True
        else:
            logger.error(f"‚ùå Erro ao iniciar monitoramento: {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar monitoramento: {e}")
        return False

def check_monitor_status():
    """Verifica status do monitoramento"""
    try:
        response = requests.get("http://localhost:8000/monitor/status", timeout=10)
        if response.status_code == 200:
            data = response.json()
            logger.info("üìä Status do Monitoramento:")
            logger.info(f"   Ativo: {'‚úÖ Sim' if data['active'] else '‚ùå N√£o'}")
            logger.info(f"   Arquivos processados: {data['processed_files_count']}")
            if data.get('next_check_in_seconds'):
                logger.info(f"   Pr√≥xima verifica√ß√£o em: {data['next_check_in_seconds']} segundos")
            return data
        else:
            logger.error(f"‚ùå Erro ao obter status: {response.text}")
            return None
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar status: {e}")
        return None

def check_new_videos():
    """For√ßa verifica√ß√£o de novos v√≠deos"""
    try:
        response = requests.post("http://localhost:8000/monitor/check-now", timeout=30)
        if response.status_code == 200:
            data = response.json()
            logger.info(f"üîç {data['message']}")
            if data.get('new_videos'):
                logger.info("üìπ Novos v√≠deos encontrados:")
                for video in data['new_videos']:
                    logger.info(f"   - {video['name']} ({video['size_mb']:.1f}MB)")
            return True
        else:
            logger.error(f"‚ùå Erro na verifica√ß√£o: {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå Erro na verifica√ß√£o manual: {e}")
        return False

def main():
    """Fun√ß√£o principal do script"""
    logger.info("=" * 60)
    logger.info("üîß CONFIGURA√á√ÉO DO MONITORAMENTO AUTOM√ÅTICO")
    logger.info("=" * 60)
    
    # 1. Testar conex√£o com API
    logger.info("\n1Ô∏è‚É£ Testando conex√£o com API...")
    if not test_api_connection():
        logger.error("‚ùå API n√£o est√° dispon√≠vel. Certifique-se de que est√° rodando em http://localhost:8000")
        return
    
    # 2. Testar conex√£o com Google
    logger.info("\n2Ô∏è‚É£ Testando conex√£o com Google APIs...")
    if not test_google_connection():
        logger.info("\nüîê Configura√ß√£o de autentica√ß√£o necess√°ria...")
        auth_url = get_google_auth_url()
        if auth_url:
            logger.info("\nüìã INSTRU√á√ïES:")
            logger.info("1. Acesse a URL de autentica√ß√£o acima")
            logger.info("2. Fa√ßa login com sua conta Google")
            logger.info("3. Autorize o acesso ao Drive e Gmail")
            logger.info("4. Copie o c√≥digo de autoriza√ß√£o")
            logger.info("5. Execute este script novamente ap√≥s a autentica√ß√£o")
            
            input("\n‚è≥ Pressione Enter ap√≥s completar a autentica√ß√£o...")
            
            # Testar novamente ap√≥s autentica√ß√£o
            if test_google_connection():
                logger.info("‚úÖ Autentica√ß√£o configurada com sucesso!")
            else:
                logger.error("‚ùå Falha na autentica√ß√£o. Tente novamente.")
                return
        else:
            logger.error("‚ùå N√£o foi poss√≠vel gerar URL de autentica√ß√£o")
            return
    else:
        logger.info("‚úÖ Conex√£o com Google APIs OK!")
    
    # 3. Testar envio de email
    logger.info("\n3Ô∏è‚É£ Testando envio de email...")
    test_email = input("üìß Digite seu email para teste: ").strip()
    if test_email:
        if send_test_email(test_email):
            logger.info("‚úÖ Email de teste enviado com sucesso!")
        else:
            logger.error("‚ùå Falha no envio de email de teste")
            return
    else:
        logger.info("‚è≠Ô∏è Pulando teste de email...")
    
    # 4. Iniciar monitoramento
    logger.info("\n4Ô∏è‚É£ Iniciando monitoramento autom√°tico...")
    if start_monitoring():
        logger.info("‚úÖ Monitoramento iniciado com sucesso!")
        
        # Verificar status
        status = check_monitor_status()
        if status:
            logger.info("üìä Monitoramento ativo e funcionando!")
        
        # Verificar v√≠deos existentes
        logger.info("\n5Ô∏è‚É£ Verificando v√≠deos existentes...")
        check_new_videos()
        
    else:
        logger.error("‚ùå Falha ao iniciar monitoramento")
        return
    
    logger.info("\n" + "=" * 60)
    logger.info("üéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!")
    logger.info("=" * 60)
    logger.info("üìã RESUMO:")
    logger.info("‚úÖ API conectada")
    logger.info("‚úÖ Google APIs autenticadas")
    logger.info("‚úÖ Email configurado")
    logger.info("‚úÖ Monitoramento ativo")
    logger.info("\nüìù PR√ìXIMOS PASSOS:")
    logger.info("1. Adicione v√≠deos √† pasta do Google Drive")
    logger.info("2. A API detectar√° automaticamente novos v√≠deos")
    logger.info("3. Transcri√ß√µes ser√£o enviadas por email")
    logger.info("\nüîó Endpoints √∫teis:")
    logger.info("   - GET /monitor/status - Status do monitoramento")
    logger.info("   - POST /monitor/check-now - Verificar v√≠deos agora")
    logger.info("   - POST /monitor/stop - Parar monitoramento")

if __name__ == "__main__":
    main() 