from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.responses import FileResponse, JSONResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import os
import uuid
import requests
import tempfile
import shutil
from pathlib import Path
import asyncio
from typing import Optional, List
import logging
from datetime import datetime
import re
import json

# Imports para monitoramento autom√°tico
from drive_monitor import drive_monitor
from drive_service import DriveService
from gmail_service import GmailService

# Imports para processamento de v√≠deo
import moviepy.editor as mp
from moviepy.video.io.VideoFileClip import VideoFileClip
import whisper
import gdown

# Imports para OAuth
from google_auth_oauthlib.flow import InstalledAppFlow
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
import pickle
import json

# Configura√ß√£o de logging mais detalhada
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Log de informa√ß√µes do sistema
logger.info("=" * 50)
logger.info("INICIANDO API DE TRANSCRI√á√ÉO DE V√çDEO")
logger.info("=" * 50)
logger.info(f"Python version: {os.sys.version}")
logger.info(f"Working directory: {os.getcwd()}")
logger.info(f"Build date: {os.environ.get('BUILD_DATE', 'Unknown')}")

app = FastAPI(
    title="Video Transcription API",
    description="API para transcri√ß√£o de v√≠deos com suporte a Google Drive, divis√£o autom√°tica, extra√ß√£o de legendas e monitoramento autom√°tico",
    version="1.3.3"
)

# Diret√≥rios de trabalho
TEMP_DIR = Path("temp")
DOWNLOADS_DIR = Path("downloads")
TRANSCRIPTIONS_DIR = Path("transcriptions")
TASKS_DIR = Path("tasks")

# Criar diret√≥rios se n√£o existirem
for directory in [TEMP_DIR, DOWNLOADS_DIR, TRANSCRIPTIONS_DIR, TASKS_DIR]:
    directory.mkdir(exist_ok=True)

# Criar diret√≥rio static se n√£o existir
STATIC_DIR = Path("static")
STATIC_DIR.mkdir(exist_ok=True)

# Montar arquivos est√°ticos
app.mount("/static", StaticFiles(directory="static"), name="static")

# Carregar modelo Whisper (ser√° carregado na primeira execu√ß√£o)
whisper_model = None

def load_whisper_model():
    global whisper_model
    if whisper_model is None:
        logger.info("Carregando modelo Whisper...")
        whisper_model = whisper.load_model("base")
        logger.info("Modelo Whisper carregado com sucesso!")
    return whisper_model

class VideoTranscriptionRequest(BaseModel):
    url: Optional[str] = None
    google_drive_url: Optional[str] = None
    base64_data: Optional[str] = None
    filename: Optional[str] = None
    extract_subtitles: bool = True
    max_segment_minutes: int = 10
    language: Optional[str] = None  # pt, en, es, etc.

class TranscriptionResponse(BaseModel):
    task_id: str
    status: str
    message: str
    upload_status: str
    estimated_time: Optional[str] = None
    check_status_url: Optional[str] = None

class TranscriptionStatus(BaseModel):
    task_id: str
    status: str  # upload_concluido, em_progresso, sucesso, erro
    progress: float
    message: str
    transcription: Optional[str] = None
    segments: Optional[List[dict]] = None
    filename: Optional[str] = None
    created_at: str
    completed_at: Optional[str] = None
    file_info: Optional[dict] = None

# Storage para tarefas em andamento
transcription_tasks = {}

def save_task_to_file(task_id: str, task_data: dict):
    """Salva o status da tarefa em arquivo para persist√™ncia"""
    try:
        task_file = TASKS_DIR / f"{task_id}.json"
        with open(task_file, 'w', encoding='utf-8') as f:
            json.dump(task_data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logger.error(f"Erro ao salvar tarefa {task_id}: {e}")

def load_task_from_file(task_id: str) -> Optional[dict]:
    """Carrega o status da tarefa do arquivo"""
    try:
        task_file = TASKS_DIR / f"{task_id}.json"
        if task_file.exists():
            with open(task_file, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"Erro ao carregar tarefa {task_id}: {e}")
    return None

def load_all_tasks():
    """Carrega todas as tarefas salvas na inicializa√ß√£o"""
    try:
        for task_file in TASKS_DIR.glob("*.json"):
            task_id = task_file.stem
            task_data = load_task_from_file(task_id)
            if task_data:
                transcription_tasks[task_id] = task_data
                logger.info(f"Tarefa {task_id} carregada: {task_data['status']}")
    except Exception as e:
        logger.error(f"Erro ao carregar tarefas: {e}")

def get_file_size_mb(file_path: Path) -> float:
    """Retorna o tamanho do arquivo em MB"""
    return file_path.stat().st_size / (1024 * 1024)

def estimate_transcription_time(file_size_mb: float) -> str:
    """Estima o tempo de transcri√ß√£o baseado no tamanho do arquivo"""
    # Estimativa: ~1 minuto para cada 10MB
    estimated_minutes = max(1, int(file_size_mb / 10))
    if estimated_minutes < 60:
        return f"{estimated_minutes} minutos"
    else:
        hours = estimated_minutes // 60
        minutes = estimated_minutes % 60
        return f"{hours}h {minutes}min"

def extract_google_drive_id(url: str) -> str:
    """Extrai o ID do Google Drive da URL de compartilhamento"""
    patterns = [
        r'drive\.google\.com/file/d/([a-zA-Z0-9-_]+)',
        r'drive\.google\.com/open\?id=([a-zA-Z0-9-_]+)',
        r'drive\.google\.com/uc\?id=([a-zA-Z0-9-_]+)'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            return match.group(1)
    
    raise ValueError("URL do Google Drive inv√°lida")

def download_from_google_drive(file_id: str, destination: Path) -> Path:
    """Baixa arquivo do Google Drive usando a biblioteca gdown para robustez."""
    url = f'https://drive.google.com/uc?id={file_id}'
    logger.info(f"üì• Iniciando download do Google Drive com gdown: {url}")
    output_path = str(destination)
    gdown.download(url, output_path, quiet=False, fuzzy=True)
    
    if not destination.exists() or destination.stat().st_size == 0:
        raise Exception(f"Falha no download com gdown. O arquivo de destino n√£o foi criado ou est√° vazio: {destination}")
        
    logger.info(f"‚úÖ Download via gdown conclu√≠do. Arquivo salvo em: {destination}")
    return destination

def extract_subtitles_from_video(video_path: Path) -> Optional[str]:
    """Extrai legendas do v√≠deo se dispon√≠veis"""
    try:
        video = VideoFileClip(str(video_path))
        
        # Verificar se h√° streams de legendas
        if hasattr(video, 'audio') and video.audio is not None:
            # Tentar extrair legendas usando ffmpeg
            subtitle_path = video_path.with_suffix('.srt')
            
            # Comando ffmpeg para extrair legendas
            import subprocess
            cmd = [
                'ffmpeg', '-i', str(video_path),
                '-map', '0:s:0',  # Primeiro stream de legendas
                '-c:s', 'srt',
                str(subtitle_path),
                '-y'  # Sobrescrever se existir
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0 and subtitle_path.exists():
                with open(subtitle_path, 'r', encoding='utf-8') as f:
                    subtitles = f.read()
                subtitle_path.unlink()  # Remover arquivo tempor√°rio
                return subtitles
            
    except Exception as e:
        logger.warning(f"Erro ao extrair legendas: {e}")
    
    return None

def split_video_by_duration(video_path: Path, max_minutes: int = 10) -> List[Path]:
    """Divide o v√≠deo em segmentos de dura√ß√£o m√°xima especificada"""
    video = VideoFileClip(str(video_path))
    duration = video.duration
    max_duration = max_minutes * 60  # Converter para segundos
    
    segments = []
    
    if duration <= max_duration:
        # V√≠deo j√° √© curto o suficiente
        segments.append(video_path)
    else:
        # Dividir em segmentos
        num_segments = int(duration / max_duration) + 1
        segment_duration = duration / num_segments
        
        for i in range(num_segments):
            start_time = i * segment_duration
            end_time = min((i + 1) * segment_duration, duration)
            
            segment_path = video_path.parent / f"{video_path.stem}_segment_{i+1:03d}{video_path.suffix}"
            
            segment_video = video.subclip(start_time, end_time)
            segment_video.write_videofile(str(segment_path), verbose=False, logger=None)
            segment_video.close()
            
            segments.append(segment_path)
    
    video.close()
    return segments

def transcribe_audio_segment(audio_path: Path, model, language: Optional[str] = None) -> dict:
    """Transcreve um segmento de √°udio usando Whisper"""
    try:
        result = model.transcribe(
            str(audio_path),
            language=language,
            verbose=False
        )
        
        return {
            "text": result["text"].strip(),
            "segments": result.get("segments", []),
            "language": result.get("language", "unknown")
        }
    except Exception as e:
        logger.error(f"Erro na transcri√ß√£o: {e}")
        return {
            "text": "",
            "segments": [],
            "language": "unknown",
            "error": str(e)
        }

async def process_video_transcription(task_id: str, request: VideoTranscriptionRequest):
    """Processa a transcri√ß√£o do v√≠deo de forma ass√≠ncrona"""
    try:
        # Fase 1: Upload e prepara√ß√£o
        transcription_tasks[task_id]["status"] = "upload_concluido"
        transcription_tasks[task_id]["progress"] = 0.1
        transcription_tasks[task_id]["message"] = "‚úÖ Upload conclu√≠do! Iniciando prepara√ß√£o do v√≠deo..."
        save_task_to_file(task_id, transcription_tasks[task_id])
        
        # Determinar origem do v√≠deo
        temp_video_path = None
        
        if request.google_drive_url:
            file_id = extract_google_drive_id(request.google_drive_url)
            filename = request.filename or f"video_{task_id}.mp4"
            temp_video_path = TEMP_DIR / filename
            download_from_google_drive(file_id, temp_video_path)
            
        elif request.url:
            filename = request.filename or f"video_{task_id}.mp4"
            temp_video_path = TEMP_DIR / filename
            response = requests.get(request.url, stream=True)
            response.raise_for_status()
            
            with open(temp_video_path, 'wb') as f:
                shutil.copyfileobj(response.raw, f)
                
        elif request.base64_data:
            import base64
            filename = request.filename or f"video_{task_id}.mp4"
            temp_video_path = TEMP_DIR / filename
            
            # Remover prefixo data: se presente
            if request.base64_data.startswith('data:'):
                base64_data = request.base64_data.split(',')[1]
            else:
                base64_data = request.base64_data
                
            with open(temp_video_path, 'wb') as f:
                f.write(base64.b64decode(base64_data))
        
        # Informa√ß√µes do arquivo
        if temp_video_path and temp_video_path.exists():
            file_size_mb = get_file_size_mb(temp_video_path)
            estimated_time = estimate_transcription_time(file_size_mb)
            
            transcription_tasks[task_id]["file_info"] = {
                "filename": temp_video_path.name,
                "size_mb": round(file_size_mb, 2),
                "estimated_time": estimated_time
            }
        else:
            raise Exception("Erro: Arquivo de v√≠deo n√£o foi criado corretamente")
        
        # Fase 2: Processamento iniciado
        transcription_tasks[task_id]["status"] = "em_progresso"
        transcription_tasks[task_id]["progress"] = 0.2
        file_size_info = f"({round(file_size_mb, 1)}MB)" if 'file_size_mb' in locals() else ""
        transcription_tasks[task_id]["message"] = f"üé¨ Arquivo recebido {file_size_info}. Verificando legendas..."
        save_task_to_file(task_id, transcription_tasks[task_id])
        
        # Extrair legendas se solicitado
        subtitles_text = None
        if request.extract_subtitles:
            subtitles_text = extract_subtitles_from_video(temp_video_path)
            if subtitles_text:
                logger.info("Legendas encontradas no v√≠deo")
        
        transcription_tasks[task_id]["progress"] = 0.3
        transcription_tasks[task_id]["message"] = "üìè Analisando dura√ß√£o do v√≠deo..."
        save_task_to_file(task_id, transcription_tasks[task_id])
        
        # Dividir v√≠deo se necess√°rio
        max_minutes = request.max_segment_minutes or 10
        video_segments = split_video_by_duration(temp_video_path, max_minutes)
        
        transcription_tasks[task_id]["progress"] = 0.4
        transcription_tasks[task_id]["message"] = f"‚úÇÔ∏è V√≠deo dividido em {len(video_segments)} segmento(s). Convertendo para √°udio..."
        save_task_to_file(task_id, transcription_tasks[task_id])
        
        # Converter segmentos para √°udio
        audio_segments = []
        for i, video_segment in enumerate(video_segments):
            audio_path = video_segment.with_suffix('.wav')
            
            video_clip = VideoFileClip(str(video_segment))
            audio_clip = video_clip.audio
            audio_clip.write_audiofile(str(audio_path), verbose=False, logger=None)
            audio_clip.close()
            video_clip.close()
            
            audio_segments.append(audio_path)
            
            # Limpar segmento de v√≠deo se n√£o for o original
            if video_segment != temp_video_path:
                video_segment.unlink()
        
        transcription_tasks[task_id]["progress"] = 0.5
        transcription_tasks[task_id]["message"] = "ü§ñ Carregando modelo de transcri√ß√£o..."
        save_task_to_file(task_id, transcription_tasks[task_id])
        
        # Carregar modelo Whisper
        model = load_whisper_model()
        
        transcription_tasks[task_id]["progress"] = 0.6
        transcription_tasks[task_id]["message"] = "üéôÔ∏è Iniciando transcri√ß√£o com intelig√™ncia artificial..."
        save_task_to_file(task_id, transcription_tasks[task_id])
        
        # Transcrever cada segmento
        all_transcriptions = []
        all_segments_data = []
        
        for i, audio_path in enumerate(audio_segments):
            transcription_tasks[task_id]["message"] = f"üéØ Transcrevendo segmento {i+1}/{len(audio_segments)}..."
            transcription_tasks[task_id]["progress"] = 0.6 + (0.3 * (i / len(audio_segments)))
            save_task_to_file(task_id, transcription_tasks[task_id])
            
            transcription_result = transcribe_audio_segment(
                audio_path, 
                model, 
                request.language
            )
            
            all_transcriptions.append(transcription_result["text"])
            all_segments_data.extend(transcription_result["segments"])
            
            # Limpar arquivo de √°udio
            audio_path.unlink()
        
        # Unir todas as transcri√ß√µes
        final_transcription = "\n\n".join(all_transcriptions)
        
        # Se havia legendas, adicionar ao resultado
        result_text = final_transcription
        if subtitles_text:
            result_text = f"=== LEGENDAS EXTRA√çDAS ===\n{subtitles_text}\n\n=== TRANSCRI√á√ÉO DE √ÅUDIO ===\n{final_transcription}"
        
        transcription_tasks[task_id]["progress"] = 0.9
        transcription_tasks[task_id]["message"] = "üíæ Salvando transcri√ß√£o..."
        save_task_to_file(task_id, transcription_tasks[task_id])
        
        # Salvar transcri√ß√£o final
        transcription_filename = f"transcription_{task_id}.txt"
        transcription_path = TRANSCRIPTIONS_DIR / transcription_filename
        
        with open(transcription_path, 'w', encoding='utf-8') as f:
            f.write(result_text)
        
        # Atualizar status final
        transcription_tasks[task_id].update({
            "status": "sucesso",
            "progress": 1.0,
            "message": "üéâ Transcri√ß√£o conclu√≠da com sucesso!",
            "transcription": result_text,
            "segments": all_segments_data,
            "filename": transcription_filename,
            "completed_at": datetime.now().isoformat()
        })
        save_task_to_file(task_id, transcription_tasks[task_id])
        
        # Limpar arquivo de v√≠deo tempor√°rio
        if temp_video_path and temp_video_path.exists():
            temp_video_path.unlink()
            
        logger.info(f"Transcri√ß√£o {task_id} conclu√≠da com sucesso")
        
    except Exception as e:
        logger.error(f"Erro na transcri√ß√£o {task_id}: {e}")
        transcription_tasks[task_id].update({
            "status": "erro",
            "message": f"‚ùå Erro: {str(e)}",
            "progress": 0.0,
            "completed_at": datetime.now().isoformat()
        })
        save_task_to_file(task_id, transcription_tasks[task_id])

@app.post("/transcribe", response_model=TranscriptionResponse)
async def transcribe_video(request: VideoTranscriptionRequest, background_tasks: BackgroundTasks):
    """Inicia o processo de transcri√ß√£o de v√≠deo"""
    
    # Validar entrada
    if not any([request.url, request.google_drive_url, request.base64_data]):
        raise HTTPException(
            status_code=400, 
            detail="√â necess√°rio fornecer url, google_drive_url ou base64_data"
        )
    
    # Gerar ID da tarefa
    task_id = str(uuid.uuid4())
    
    # Inicializar status da tarefa
    transcription_tasks[task_id] = {
        "status": "upload_concluido",
        "progress": 0.0,
        "message": "‚úÖ Upload realizado com sucesso! Transcri√ß√£o ser√° iniciada em instantes...",
        "created_at": datetime.now().isoformat(),
        "transcription": None,
        "segments": None,
        "filename": None,
        "completed_at": None,
        "file_info": None
    }
    
    # Salvar tarefa
    save_task_to_file(task_id, transcription_tasks[task_id])
    
    # Adicionar tarefa ao background
    background_tasks.add_task(process_video_transcription, task_id, request)
    
    return TranscriptionResponse(
        task_id=task_id,
        status="upload_concluido",
        upload_status="sucesso",
        message="üéâ Upload conclu√≠do com sucesso! Sua transcri√ß√£o est√° sendo processada.",
        estimated_time="A transcri√ß√£o ser√° iniciada em alguns segundos",
        check_status_url=f"/status/{task_id}"
    )

@app.get("/status/{task_id}", response_model=TranscriptionStatus)
async def get_transcription_status(task_id: str):
    """Obt√©m o status de uma transcri√ß√£o"""
    
    # Tentar carregar da mem√≥ria ou arquivo
    task_data = transcription_tasks.get(task_id)
    if not task_data:
        task_data = load_task_from_file(task_id)
        if task_data:
            transcription_tasks[task_id] = task_data
    
    if not task_data:
        raise HTTPException(status_code=404, detail="Tarefa n√£o encontrada")
    
    return TranscriptionStatus(
        task_id=task_id,
        status=task_data["status"],
        progress=task_data["progress"],
        message=task_data["message"],
        transcription=task_data.get("transcription"),
        segments=task_data.get("segments"),
        filename=task_data.get("filename"),
        created_at=task_data["created_at"],
        completed_at=task_data.get("completed_at"),
        file_info=task_data.get("file_info")
    )

@app.get("/download/{filename}")
async def download_transcription(filename: str):
    """Download do arquivo de transcri√ß√£o"""
    
    file_path = TRANSCRIPTIONS_DIR / filename
    
    if not file_path.exists():
        raise HTTPException(status_code=404, detail="Arquivo n√£o encontrado")
    
    return FileResponse(
        path=str(file_path),
        filename=filename,
        media_type='text/plain; charset=utf-8'
    )

@app.get("/tasks")
async def list_tasks():
    """Lista todas as tarefas de transcri√ß√£o"""
    return {
        "tasks": [
            {
                "task_id": task_id,
                "status": data["status"],
                "progress": data["progress"],
                "created_at": data["created_at"],
                "message": data["message"]
            }
            for task_id, data in transcription_tasks.items()
        ]
    }

@app.delete("/tasks/{task_id}")
async def delete_task(task_id: str):
    """Remove uma tarefa da lista"""
    
    if task_id not in transcription_tasks:
        raise HTTPException(status_code=404, detail="Tarefa n√£o encontrada")
    
    # Remover arquivos associados se existirem
    task_data = transcription_tasks[task_id]
    if task_data.get("filename"):
        file_path = TRANSCRIPTIONS_DIR / task_data["filename"]
        if file_path.exists():
            file_path.unlink()
    
    del transcription_tasks[task_id]
    
    return {"message": "Tarefa removida com sucesso"}

@app.get("/")
async def root():
    """Endpoint raiz - Interface web ou informa√ß√µes da API"""
    return HTMLResponse(content=open("static/index.html").read(), media_type="text/html")

@app.get("/api")
async def api_info():
    """Endpoint com informa√ß√µes da API"""
    return {
        "message": "Video Transcription API",
        "version": "1.3.0",
        "description": "API para transcri√ß√£o de v√≠deos com processamento ass√≠ncrono, status em tempo real e monitoramento autom√°tico",
        "build_date": os.environ.get('BUILD_DATE', 'Unknown'),
        "status_meanings": {
            "upload_concluido": "Arquivo recebido, transcri√ß√£o ser√° iniciada",
            "em_progresso": "Transcri√ß√£o em andamento",
            "sucesso": "Transcri√ß√£o conclu√≠da com sucesso",
            "erro": "Erro durante o processamento"
        },
        "endpoints": [
            "POST /transcribe - Iniciar transcri√ß√£o (resposta imediata)",
            "GET /status/{task_id} - Verificar status da transcri√ß√£o",
            "GET /download/{filename} - Download da transcri√ß√£o",
            "GET /tasks - Listar todas as tarefas",
            "DELETE /tasks/{task_id} - Remover tarefa",
            "POST /monitor/start - Iniciar monitoramento autom√°tico",
            "POST /monitor/stop - Parar monitoramento autom√°tico",
            "GET /monitor/status - Status do monitoramento",
            "GET /google/test-connection - Testar conex√µes Google"
        ]
    }

@app.get("/health")
async def health_check():
    """Health check da API com informa√ß√µes detalhadas"""
    import psutil
    import platform
    
    try:
        # Informa√ß√µes do sistema
        memory_info = psutil.virtual_memory()
        disk_info = psutil.disk_usage('/')
        
        health_data = {
                    "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.3.3",
            "build_date": os.environ.get('BUILD_DATE', 'Unknown'),
            "whisper_loaded": whisper_model is not None,
            "system_info": {
                "platform": platform.system(),
                "python_version": platform.python_version(),
                "memory_usage_percent": memory_info.percent,
                "disk_usage_percent": disk_info.percent,
                "available_memory_gb": round(memory_info.available / (1024**3), 2)
            },
            "directories": {
                "temp_exists": TEMP_DIR.exists(),
                "downloads_exists": DOWNLOADS_DIR.exists(),
                "transcriptions_exists": TRANSCRIPTIONS_DIR.exists()
            }
        }
        
        logger.info(f"Health check OK - Memory: {memory_info.percent}%, Disk: {disk_info.percent}%")
        return health_data
        
    except Exception as e:
        logger.error(f"Health check error: {e}")
        return {
                    "status": "unhealthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.3.3",
            "error": str(e)
        }

# Carregar tarefas salvas na inicializa√ß√£o
load_all_tasks()

# ============================================================================
# NOVAS ROTAS PARA MONITORAMENTO AUTOM√ÅTICO
# ============================================================================

class MonitorStatus(BaseModel):
    active: bool
    last_check: Optional[str] = None
    processed_files_count: int
    next_check_in_seconds: Optional[int] = None

class GoogleAuthRequest(BaseModel):
    email: str

@app.post("/monitor/start")
async def start_automated_monitoring():
    """Inicia o monitoramento autom√°tico do Google Drive"""
    try:
        # Iniciar monitoramento em background
        asyncio.create_task(drive_monitor.start_monitoring())
        
        return {
            "status": "success",
            "message": "üöÄ Monitoramento autom√°tico iniciado com sucesso!",
            "details": {
                "folder_id": drive_monitor.drive_config['folder_id'],
                "check_interval": drive_monitor.drive_config['monitor_interval'],
                "destination_email": drive_monitor.email_config['destination_email']
            }
        }
    except Exception as e:
        logger.error(f"Erro ao iniciar monitoramento: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao iniciar monitoramento: {str(e)}")

@app.post("/monitor/stop")
async def stop_automated_monitoring():
    """Para o monitoramento autom√°tico"""
    try:
        drive_monitor.stop_monitoring()
        
        return {
            "status": "success",
            "message": "üõë Monitoramento autom√°tico parado com sucesso!"
        }
    except Exception as e:
        logger.error(f"Erro ao parar monitoramento: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao parar monitoramento: {str(e)}")

@app.get("/monitor/status", response_model=MonitorStatus)
async def get_monitor_status():
    """Obt√©m o status do monitoramento autom√°tico"""
    try:
        return MonitorStatus(
            active=drive_monitor.monitoring_active,
            last_check=None,  # Pode ser implementado para rastrear √∫ltimo check
            processed_files_count=len(drive_monitor.processed_files),
            next_check_in_seconds=drive_monitor.drive_config['monitor_interval'] if drive_monitor.monitoring_active else None
        )
    except Exception as e:
        logger.error(f"Erro ao obter status do monitoramento: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao obter status: {str(e)}")

@app.post("/monitor/check-now")
async def check_new_videos_now():
    """For√ßa uma verifica√ß√£o imediata de novos v√≠deos"""
    try:
        new_videos = await drive_monitor.check_new_videos()
        
        return {
            "status": "success",
            "message": f"üîç Verifica√ß√£o conclu√≠da - {len(new_videos)} novos v√≠deos encontrados",
            "new_videos": new_videos
        }
    except Exception as e:
        logger.error(f"Erro na verifica√ß√£o manual: {e}")
        raise HTTPException(status_code=500, detail=f"Erro na verifica√ß√£o: {str(e)}")

@app.get("/google/auth-url")
async def get_google_auth_url():
    """Gera URL de autentica√ß√£o do Google"""
    try:
        from google_config import get_google_credentials, GOOGLE_SCOPES
        
        # Debug: verificar configura√ß√µes
        logger.info("üîç Verificando configura√ß√µes OAuth...")
        
        creds = get_google_credentials()
        logger.info(f"Client ID configurado: {'Sim' if creds['client_id'] else 'N√£o'}")
        logger.info(f"Client Secret configurado: {'Sim' if creds['client_secret'] else 'N√£o'}")
        logger.info(f"Redirect URI: {creds['redirect_uri']}")
        
        # Verificar se as credenciais est√£o configuradas
        if not creds['client_id'] or not creds['client_secret']:
            raise Exception("Credenciais do Google n√£o configuradas. Configure GOOGLE_CLIENT_ID e GOOGLE_CLIENT_SECRET no Easypanel.")
        
        # Criar fluxo de autentica√ß√£o
        flow = InstalledAppFlow.from_client_config(
            {
                "installed": {
                    "client_id": creds['client_id'],
                    "project_id": "video-transcription-api",
                    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                    "token_uri": "https://oauth2.googleapis.com/token",
                    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                    "client_secret": creds['client_secret'],
                    "redirect_uris": [creds['redirect_uri']]
                }
            },
            GOOGLE_SCOPES
        )
        
        # Salvar o fluxo para usar no callback
        with open('oauth_flow.pickle', 'wb') as f:
            pickle.dump(flow, f)
        
        auth_url, _ = flow.authorization_url(
            access_type='offline',
            prompt='consent',
            include_granted_scopes='true'
        )
        
        logger.info("‚úÖ URL de autentica√ß√£o gerada com sucesso")
        
        return {
            "auth_url": auth_url,
            "message": "Acesse esta URL para autorizar o acesso ao Google Drive e Gmail"
        }
    except Exception as e:
        logger.error(f"Erro ao gerar URL de autentica√ß√£o: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao gerar URL: {str(e)}")

@app.get("/auth/callback")
async def oauth_callback(code: str = None, error: str = None):
    """Endpoint de callback para OAuth2"""
    try:
        if error:
            logger.error(f"Erro no OAuth: {error}")
            return HTMLResponse(f"""
            <html>
            <head><title>Erro de Autentica√ß√£o</title></head>
            <body>
                <h1>‚ùå Erro de Autentica√ß√£o</h1>
                <p>Erro: {error}</p>
                <p><a href="/">Voltar ao in√≠cio</a></p>
            </body>
            </html>
            """)
        
        if not code:
            return HTMLResponse("""
            <html>
            <head><title>Erro de Autentica√ß√£o</title></head>
            <body>
                <h1>‚ùå C√≥digo de autoriza√ß√£o n√£o recebido</h1>
                <p><a href="/">Voltar ao in√≠cio</a></p>
            </body>
            </html>
            """)
        
        # Carregar o fluxo salvo
        try:
            with open('oauth_flow.pickle', 'rb') as f:
                flow = pickle.load(f)
        except FileNotFoundError:
            return HTMLResponse("""
            <html>
            <head><title>Erro de Autentica√ß√£o</title></head>
            <body>
                <h1>‚ùå Sess√£o de autentica√ß√£o expirada</h1>
                <p>Por favor, inicie o processo de autentica√ß√£o novamente.</p>
                <p><a href="/">Voltar ao in√≠cio</a></p>
            </body>
            </html>
            """)
        
        # Trocar o c√≥digo por tokens
        flow.fetch_token(code=code)
        
        # Salvar as credenciais
        credentials = flow.credentials
        creds_data = {
            'token': credentials.token,
            'refresh_token': credentials.refresh_token,
            'token_uri': credentials.token_uri,
            'client_id': credentials.client_id,
            'client_secret': credentials.client_secret,
            'scopes': credentials.scopes
        }
        
        with open('token.json', 'w') as f:
            json.dump(creds_data, f)
        
        # Limpar o arquivo de fluxo
        try:
            os.remove('oauth_flow.pickle')
        except:
            pass
        
        logger.info("‚úÖ Autentica√ß√£o OAuth conclu√≠da com sucesso!")
        
        return HTMLResponse(f"""
        <html>
        <head>
            <title>Autentica√ß√£o Conclu√≠da</title>
            <style>
                body {{ font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }}
                .success {{ color: #28a745; }}
                .info {{ color: #17a2b8; }}
            </style>
        </head>
        <body>
            <h1 class="success">‚úÖ Autentica√ß√£o Conclu√≠da!</h1>
            <p class="info">As credenciais do Google foram configuradas com sucesso.</p>
            <p>Voc√™ pode fechar esta janela e voltar √† interface principal.</p>
            <p><a href="/">Voltar ao in√≠cio</a></p>
        </body>
        </html>
        """)
        
    except Exception as e:
        logger.error(f"Erro no callback OAuth: {e}")
        return HTMLResponse(f"""
        <html>
        <head><title>Erro de Autentica√ß√£o</title></head>
        <body>
            <h1>‚ùå Erro durante a autentica√ß√£o</h1>
            <p>Erro: {str(e)}</p>
            <p><a href="/">Voltar ao in√≠cio</a></p>
        </body>
        </html>
        """)

@app.get("/google/test-connection")
async def test_google_connection():
    """Testa conex√£o com Google APIs"""
    try:
        drive_service = DriveService()
        gmail_service = GmailService()
        
        drive_ok = await drive_service.test_connection()
        gmail_ok = await gmail_service.test_connection()
        
        return {
            "drive_connection": "‚úÖ OK" if drive_ok else "‚ùå FALHA",
            "gmail_connection": "‚úÖ OK" if gmail_ok else "‚ùå FALHA",
            "drive_user_email": drive_service.get_user_email() if drive_ok else None,
            "gmail_user_email": gmail_service.get_user_email() if gmail_ok else None
        }
    except Exception as e:
        logger.error(f"Erro ao testar conex√µes Google: {e}")
        raise HTTPException(status_code=500, detail=f"Erro nos testes: {str(e)}")

@app.get("/google/debug-config")
async def debug_google_config():
    """Debug: verifica configura√ß√µes do Google"""
    try:
        from google_config import get_google_credentials
        
        creds = get_google_credentials()
        
        return {
            "client_id_configured": bool(creds['client_id']),
            "client_secret_configured": bool(creds['client_secret']),
            "redirect_uri": creds['redirect_uri'],
            "client_id_preview": creds['client_id'][:10] + "..." if creds['client_id'] else "N√£o configurado",
            "client_secret_preview": creds['client_secret'][:10] + "..." if creds['client_secret'] else "N√£o configurado",
            "environment_vars": {
                "GOOGLE_CLIENT_ID": os.environ.get("GOOGLE_CLIENT_ID", "N√£o configurado"),
                "GOOGLE_CLIENT_SECRET": os.environ.get("GOOGLE_CLIENT_SECRET", "N√£o configurado"),
                "GOOGLE_REDIRECT_URI": os.environ.get("GOOGLE_REDIRECT_URI", "N√£o configurado")
            }
        }
    except Exception as e:
        logger.error(f"Erro ao debug configura√ß√µes: {e}")
        raise HTTPException(status_code=500, detail=f"Erro no debug: {str(e)}")

@app.post("/google/send-test-email")
async def send_test_email(request: GoogleAuthRequest):
    """Envia email de teste"""
    try:
        gmail_service = GmailService()
        
        success = await gmail_service.send_simple_email(
            to_email=request.email,
            subject="üß™ Teste - API de Transcri√ß√£o",
            body="Este √© um email de teste da API de Transcri√ß√£o de V√≠deos. Se voc√™ recebeu este email, a configura√ß√£o do Gmail est√° funcionando corretamente!"
        )
        
        if success:
            return {
                "status": "success",
                "message": f"üìß Email de teste enviado para {request.email}"
            }
        else:
            raise HTTPException(status_code=500, detail="Falha ao enviar email de teste")
            
    except Exception as e:
        logger.error(f"Erro ao enviar email de teste: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao enviar email: {str(e)}")

# Log da vers√£o na inicializa√ß√£o
logger.info("API de Transcri√ß√£o de V√≠deo iniciada. Vers√£o: 1.3.3")
logger.info(f"Diret√≥rios criados: {[str(d) for d in [TEMP_DIR, DOWNLOADS_DIR, TRANSCRIPTIONS_DIR, TASKS_DIR]]}")
logger.info(f"Tarefas carregadas: {len(transcription_tasks)}")
logger.info("Aplica√ß√£o pronta para receber requisi√ß√µes!")
logger.info("=" * 50)